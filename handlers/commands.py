from aiogram import types, Router
from aiogram.filters import Command
from keyboards.start import *
#from weather_func import get_weather_func
from db import Database
from config import admin_tg_id
import datetime, requests
from config import open_weather_token


router = Router()
db = Database('database.db')

@router.message(Command("button"))
async def handle_buttons(message: types.Message):
    await message.answer(
        text="–ö–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã",
        reply_markup=keyboard_markup
    )

@router.message(Command("weather"))
async def weather_handler(message: types.Message):
    if message.chat.type == 'private':
        if not await db.user_exists(message.from_user.id):
            await db.add_user(message.from_user.id)
    await message.answer("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, –ª–∏–±–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∏ –≤—Ä–µ–º—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú), —á—Ç–æ–±—ã —è –ø—Ä–∏—Å–ª–∞–ª –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –º–æ–≥—É –≤—ã–¥–∞—Ç—å –Ω–∞ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—â–µ–µ –¥–ª—è —Ç–µ–±—è –≤—Ä–µ–º—è: 0:00, 3:00, 6:00, 9:00, 12:00, 15:00, 18:00, 21:00.", reply_markup=keyboard_back)

@router.message(Command("help"))
async def help_handler(message: types.Message):
    await message.answer("–Ø –ø—Ä–∏–Ω–∏–º–∞—é –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –º–æ–≥—É –≤—ã–¥–∞—Ç—å –Ω–∞ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—â–µ–µ –¥–ª—è —Ç–µ–±—è –≤—Ä–µ–º—è: 0:00, 3:00, 6:00, 9:00, 12:00, 15:00, 18:00, 21:00")
    await message.answer('–ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –ß–ß:–ú–ú"', reply_markup=keyboard_back)

@router.message(Command("version"))
async def version_handler(message: types.Message):
    await message.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç 24 –∞–ø—Ä–µ–ª—è 2024 –≥–æ–¥–∞. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–∞–±–æ—Ç–æ–π –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –∞, —Ç–∞–∫–∂–µ, —Ä—è–¥ –º–µ–ª–∫–∏—Ö –æ—à–∏–±–æ–∫. –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–∏–ª –±–∞–≥, –ø–∏—à–∏: @e_gooor_abs", reply_markup=keyboard_back)

@router.message(Command("info"))
async def team_handler(message: types.Message):
    await message.answer("–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ NET", reply_markup=keyboard_back)

@router.message(Command("main1"))
async def developer_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç –æ—Ç @e_gooor_abs", reply_markup=keyboard_back)

@router.message(Command("send"))
async def send_handler(message: types.Message):
    from main import bot
    if message.chat.type == 'private':
        if message.from_user.id == admin_tg_id:
            text = message.text[6:]
            users = await db.get_users()
            count_sent = 0
            for row in users:
                try:
                    await bot.send_message(row[0], text)
                    if row[1] != 1:
                        await db.set_active(row[0], 1)
                    count_sent += 1
                except:
                    await db.set_active(row[0], 0)
            await message.reply(f'–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count_sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
        else: await message.answer("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")

@router.message(Command("users"))
async def list_users_handler(message: types.Message):
    if message.chat.type == 'private':
        if message.from_user.id == admin_tg_id:
            users = await db.get_users()
            if users:
                user_list = "\n".join([f"User ID: {row[0]}, Active: {row[1]}" for row in users])
                await message.answer(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{user_list}")
            else:
                await message.reply("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        else:
            await message.answer("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")

@router.message()
async def get_weather_func(message: types.Message):
    try:
        city, time_str = message.text.split(maxsplit=1)
        time_obj = datetime.datetime.strptime(time_str, "%H:%M").time()

        r = requests.get(
            f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={open_weather_token}&units=metric"
        )
        data = r.json()

        weather_forecast = None
        for forecast in data['list']:
            forecast_time = datetime.datetime.fromtimestamp(forecast['dt']).time()
            if forecast_time.hour == time_obj.hour and forecast_time.minute == time_obj.minute:
                weather_forecast = forecast
                break

        if weather_forecast:
            cur_weather = weather_forecast["main"]["temp"]
            weather_description = weather_forecast["weather"][0]["main"]
            code_to_smile = {
                "Clear": "–Ø—Å–Ω–æ \U00002600",
                "Clouds": "–û–±–ª–∞—á–Ω–æ \U00002601",
                "Rain": "–î–æ–∂–¥—å \U00002614",
                "Drizzle": "–î–æ–∂–¥—å \U00002614",
                "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
                "Snow": "–°–Ω–µ–≥ \U0001F328",
                "Mist": "–¢—É–º–∞–Ω \U0001F32B"
            }
            wd = code_to_smile.get(weather_description, "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, –Ω–µ –ø–æ–π–º—É —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞!")
            humidity = weather_forecast["main"]["humidity"]
            pressure = weather_forecast["main"]["pressure"]
            wind = weather_forecast["wind"]["speed"]
            sunrise_timestamp = datetime.datetime.fromtimestamp(data["city"]["sunrise"])
            sunset_timestamp = datetime.datetime.fromtimestamp(data["city"]["sunset"])
            length_of_the_day = datetime.timedelta(seconds=data["city"]["sunset"] - data["city"]["sunrise"])


            await message.reply(f"***{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}***\n"
                                f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ {city} –Ω–∞ {time_obj.strftime('%H:%M')}:\n"
                                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather}C¬∞ {wd}\n"
                                f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä: {wind} –º/—Å\n"
                                f"–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n"
                                f"***–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!***",
                                reply_markup=keyboard_share
                                )
        else:
            await message.reply("–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")


    except ValueError:
        code_to_smile = {
            "Clear": "–Ø—Å–Ω–æ \U00002600",
            "Clouds": "–û–±–ª–∞—á–Ω–æ \U00002601",
            "Rain": "–î–æ–∂–¥—å \U00002614",
            "Drizzle": "–î–æ–∂–¥—å \U00002614",
            "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
            "Snow": "–°–Ω–µ–≥ \U0001F328",
            "Mist": "–¢—É–º–∞–Ω \U0001F32B"
        }

        try:

            r = requests.get(
                f"http://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={open_weather_token}&units=metric"
            )

            data = r.json()
            city = data["name"]
            cur_weather = data["main"]["temp"]
            weather_description = data["weather"][0]["main"]
            wd = code_to_smile.get(weather_description, "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, –Ω–µ –ø–æ–π–º—É —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞!")
            humidity = data["main"]["humidity"]
            pressure = data["main"]["pressure"]
            wind = data["wind"]["speed"]
            sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
            sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])
            length_of_the_day = datetime.timedelta(seconds=data["sys"]["sunset"] - data["sys"]["sunrise"])


            await message.reply(f"***{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}***\n"
                                f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather}C¬∞ {wd}\n"
                                f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä: {wind} –º/—Å\n"
                                f"–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n"
                                f"***–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!***",
                                reply_markup=keyboard_share
                                )


        except:
            await message.reply("\U00002620 –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ \U00002620")
            await message.reply("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ø –ø—Ä–∏–Ω–∏–º–∞—é –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö")

    except Exception as e:
        print(e)
        await message.reply("\U00002620 –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ \U00002620")
        await message.reply("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ø –ø—Ä–∏–Ω–∏–º–∞—é –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö")



@router.message()
async def handle_text(message: types.Message):
    if message.text == 'üÜò':
        await help_handler(message)
    elif message.text == '–ü–æ–º–æ—â—å':
        await help_handler(message)
    elif message.text == '‚òÄÔ∏è–ü–æ–≥–æ–¥–∞‚òÄÔ∏è':
        await weather_handler(message)
    elif message.text == '–ü–æ–≥–æ–¥–∞':
        await weather_handler(message)
    elif message.text == 'üíª–í–µ—Ä—Å–∏—èüíª':
        await version_handler(message)
    elif message.text == '–í–µ—Ä—Å–∏—è':
        await version_handler(message)
    elif message.text == '–ò–Ω—Ñ–∞':
        await team_handler(message)
    elif message.text == '–†–∞–∑—Ä–∞–±':
        await developer_handler(message)
    elif message.text == '–ö–Ω–æ–ø–∫–∏':
        await handle_buttons(message)
    else:
        await get_weather_func(message)
